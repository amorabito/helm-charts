---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  {{- with .Values.app.global.annotations }}
  annotations:
  {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote}}
  {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.app.global.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-app
    {{- with .Values.app.global.annotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote}}
      {{- end }}
    {{- end }}
    spec:
      {{- with .Values.app.global.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: wger
          image: "{{ .Values.app.global.image.registry }}/{{ .Values.app.global.image.repository }}:{{ .Values.app.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.global.image.PullPolicy }}
          resources:
            requests:
              memory: {{ .Values.app.resources.requests.memory }}
              cpu: {{ .Values.app.resources.requests.cpu }}
            limits:
              memory: {{ .Values.app.resources.limits.memory }}
              cpu: {{ .Values.app.resources.limits.cpu }}
          {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
          volumeMounts:
            - name: wger-media
              mountPath: /home/wger/media
              readOnly: false
            - name: wger-static
              mountPath: /home/wger/static
              readOnly: false
          {{- end }}
          ports:
            - containerPort: 8000
          env:
            # django db
            - name: DJANGO_DB_ENGINE
              value: "django.db.backends.postgresql"
            - name: DJANGO_DB_USER
              value: {{ .Values.postgres.settings.superuser | quote }}
            - name: DJANGO_DB_PASSWORD
              value: {{ .Values.postgres.settings.superuserPassword | quote }}
            - name: DJANGO_DB_DATABASE
              value: {{ .Values.postgres.userDatabase.name | quote }}
            - name: DJANGO_DB_HOST
              value: "{{ .Release.Name }}-postgres"
            - name: DJANGO_DB_PORT
              value: {{ .Values.postgres.service.port | quote }}
            # django cache
            - name: DJANGO_CACHE_BACKEND
              value: "django_redis.cache.RedisCache"
            - name: DJANGO_CACHE_LOCATION
              value: "redis://{{ .Release.Name }}-redis:{{ .Values.redis.service.serverPort }}/1"
            - name: DJANGO_CACHE_CLIENT_CLASS
              value: django_redis.client.DefaultClient
            - name: DJANGO_CACHE_TIMEOUT
              value: {{ .Values.app.django.secret.name | default "1296000" }}
            # django email
            - name: EMAIL_BACKEND
              value: "django.core.mail.backends.console.EmailBackend"
            # django general
            {{- if .Values.app.nginx.enabled }}
            - name: DJANGO_DEBUG
              value: "False"
            {{- else }}
            - name: DJANGO_DEBUG
              value: "True"
            {{- end }}
            - name: DJANGO_MEDIA_ROOT
              value: /home/wger/media
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.django.secret.name | default "django" }}
                  key: {{ .Values.app.django.secret.key | default "secret-key" }}
            {{- if .Values.ingress.enabled }}
            - name: SITE_URL
              value: {{ .Values.ingress.url }}
            {{- end }}
            # axes
            {{- if .Values.app.axes.enabled }}
            - name: AXES_ENABLED
              value: "True"
            {{- else }}
            - name: AXES_ENABLED
              value: "False"
            {{- end }}
            - name: AXES_FAILURE_LIMIT
              value: {{ .Values.app.axes.failureLimit | default "10" }}
            - name: AXES_COOLOFF_TIME
              value: {{ .Values.app.axes.cooloffTime | default "30" }}
            - name: AXES_HANDLER
              value: "axes.handlers.cache.AxesCacheHandler"
            # jwt auth
            - name: SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.jwt.secret.name | default "jwt" }}
                  key: {{ .Values.app.jwt.secret.key | default "signing-key" }}
            - name: ACCESS_TOKEN_LIFETIME
              value: {{ .Values.app.jwt.accessTokenLifetime | default "10" }}
            - name: REFRESH_TOKEN_LIFETIME
              value: {{ .Values.app.jwt.refreshTokenLifetime | default "24" }}
            # other
            {{- if .Values.app.nginx.enabled }}
            - name: WGER_USE_GUNICORN
              value: "True"
            {{- end }}
            - name: EXERCISE_CACHE_TTL
              value: "18000"
        {{- with .Values.app.environment }}
          {{- range  . }}
            - name: {{ .name | quote }}
              value: {{ .value | quote }}
          {{- end }}
        {{- end }}
        {{- if .Values.app.nginx.enabled }}
        - name: nginx
          image: {{ .Values.app.nginx.image }}
          imagePullPolicy: {{ .Values.app.nginx.imagePullPolicy }}
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/
            - name: wger-media
              mountPath: /var/www/html/media
              readOnly: true
            - name: wger-static
              mountPath: /var/www/html/static
              readOnly: true
          resources:
            requests:
              cpu: 10m
        {{- end }}
      initContainers:
        - name: init-container
          image: docker.io/busybox:latest
          command:
            - /bin/sh
            - -c
            - until nc -zvw10 {{.Release.Name}}-postgres {{ .Values.postgres.service.port }}; do echo "Waiting for postgres service ({{.Release.Name}}-postgres:{{ .Values.postgres.service.port }}) "; sleep 2; done &&
              until nc -zvw10 {{.Release.Name}}-redis {{ .Values.redis.service.serverPort }}; do echo "Waiting for redis service ({{.Release.Name}}-redis:{{ .Values.redis.service.serverPort }})"; sleep 2; done
      {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) (.Values.app.nginx.enabled) }}
      volumes:
        {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
        - name: wger-media
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.media | default "wger-media" | quote }}
        - name: wger-static
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.static | default "wger-static" | quote }}
        {{- end }}
        {{- if .Values.app.nginx.enabled }}
        - name: nginx-conf
          configMap:
            name: {{ .Release.Name }}-nginx-configmap
        {{- end }}
      {{- end }}
