---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
  {{- with .Values.app.global.annotations }}
  annotations:
  {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote}}
  {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.app.global.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-app
    {{- with .Values.app.global.annotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote}}
      {{- end }}
    {{- end }}
    spec:
      {{- with .Values.app.global.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        # wger app container
        - name: wger
          {{- include "wger.container" . | indent 10 }}
          ports:
            - containerPort: 8000
          resources:
            requests:
              memory: {{ .Values.app.resources.requests.memory }}
              cpu: {{ .Values.app.resources.requests.cpu }}
            limits:
              memory: {{ .Values.app.resources.limits.memory }}
              cpu: {{ .Values.app.resources.limits.cpu }}
          {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
          volumeMounts:
            - name: wger-media
              mountPath: /home/wger/media
              readOnly: false
            - name: wger-static
              mountPath: /home/wger/static
              readOnly: false
            {{- if .Values.app.celery.enabled }}
            - name: wger-celery-beat
              mountPath: /home/wger/beat
              readOnly: false
            {{- end }}
          {{- end }}
        # celery
        {{- if .Values.app.celery.enabled }}
        {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
        # celery worker
        - name: celery-worker
          {{- include "wger.container" . | indent 10 }}
          command: ["/start-worker"]
          volumeMounts:
            - name: wger-media
              mountPath: /home/wger/media
              readOnly: false
        # celery beat
        - name: celery-beat
          {{- include "wger.container" . | indent 10 }}
          command: ["/start-beat"]
          volumeMounts:
            - name: wger-celery-beat
              mountPath: /home/wger/beat
              readOnly: false
        # celery flower
          {{- if .Values.app.celery.flower.enabled }}
        - name: celery-flower
          {{- include "wger.container" . | indent 10 }}
          command: ["/start-flower"]
          ports:
            - containerPort: 5555
          {{- end }}
        {{- end }}
        {{- end }}
        # nginx container
        {{- if .Values.app.nginx.enabled }}
        - name: nginx
          image: {{ .Values.app.nginx.image }}
          imagePullPolicy: {{ .Values.app.nginx.imagePullPolicy }}
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/
            - name: wger-media
              mountPath: /var/www/html/media
              readOnly: true
            - name: wger-static
              mountPath: /var/www/html/static
              readOnly: true
          resources:
            requests:
              cpu: 10m
        {{- end }}
      initContainers:
        - name: init-container
          image: docker.io/busybox:latest
          command:
            - /bin/sh
            - -c
            - until nc -zvw10 {{.Release.Name}}-postgres {{ .Values.postgres.service.port }}; do echo "Waiting for postgres service ({{.Release.Name}}-postgres:{{ .Values.postgres.service.port }}) "; sleep 2; done &&
              until nc -zvw10 {{.Release.Name}}-redis {{ .Values.redis.service.serverPort }}; do echo "Waiting for redis service ({{.Release.Name}}-redis:{{ .Values.redis.service.serverPort }})"; sleep 2; done
      {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) (.Values.app.nginx.enabled) }}
      volumes:
        {{- if or (.Values.app.persistence.enabled) (.Values.app.nginx.enabled) }}
        - name: wger-media
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.media | default "wger-media" | quote }}
        - name: wger-static
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.static | default "wger-static" | quote }}
        {{- if .Values.app.celery.enabled }}
        - name: wger-celery-beat
          persistentVolumeClaim:
            claimName: {{ .Values.app.persistence.existingClaim.celeryBeat | default "wger-celery-beat" | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.app.nginx.enabled }}
        - name: nginx-conf
          configMap:
            name: {{ .Release.Name }}-nginx-configmap
        {{- end }}
      {{- end }}
